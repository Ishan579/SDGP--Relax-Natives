{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\sem 2\\\\SDGP github code\\\\SDGP--Relax-Natives\\\\posenet\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport './App.css';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\nimport { drawKeypoints, drawSkeleton } from \"./utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); //load posenet\n\n  const runPosenet = async () => {\n    const net = await posenet.load({\n      inputResolution: {\n        width: 640,\n        height: 480\n      },\n      scale: 0.5\n    });\n    setInterval(() => {\n      detect(net);\n    }, 100); //run \n  }; //Detect function.\n\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      //get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; //set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; //Make detections\n\n      const pose = await net.estimateSinglePose(video);\n      console.log(pose); //call draw function\n\n      drawCanvas(pose, video, videoWidth, videoHeight, canvasRef);\n    }\n  }; //Draw function\n\n\n  const drawCanvas = (pose, video, videoWidth, videoHeight, canvas) => {\n    const ctx = canvas.current.getContext(\"2d\");\n    canvas.current.width = videoWidth;\n    canvas.current.height = videoHeight;\n    drawKeypoints(pose[\"keypoints\"], 0.5, ctx);\n    drawSkeleton(pose[\"keypoints\"], 0.5, ctx);\n  };\n\n  runPosenet();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/sem 2/SDGP github code/SDGP--Relax-Natives/posenet/src/App.js"],"names":["React","useRef","tf","posenet","Webcam","drawKeypoints","drawSkeleton","App","webcamRef","canvasRef","runPosenet","net","load","inputResolution","width","height","scale","setInterval","detect","current","video","readyState","videoWidth","videoHeight","pose","estimateSinglePose","console","log","drawCanvas","canvas","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\nimport './App.css';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\nimport { drawKeypoints, drawSkeleton } from \"./utilities\";\n\n\nfunction App() {\n\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n\n    //load posenet\n\n    const runPosenet = async () =>{\n      const net = await posenet.load({\n        inputResolution:{width:640, height:480},\n        scale:0.5\n      });\n\n      setInterval(()=>{\n        detect(net)\n      }, 100) //run \n    }\n\n    //Detect function.\n\n    const detect = async (net) => {\n      if(typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && \n      webcamRef.current.video.readyState===4) {\n        \n        //get video properties\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight;\n\n        //set video width\n        webcamRef.current.video.width = videoWidth;\n        webcamRef.current.video.height = videoHeight;\n\n        //Make detections\n        const pose = await net.estimateSinglePose(video);\n        console.log(pose);\n\n        //call draw function\n        drawCanvas(pose, video, videoWidth, videoHeight, canvasRef);\n\n      }\n    };\n\n\n    //Draw function\n    const drawCanvas = (pose, video, videoWidth, videoHeight, canvas) => {\n      const ctx = canvas.current.getContext(\"2d\");\n      canvas.current.width = videoWidth;\n      canvas.current.height = videoHeight;\n\n      drawKeypoints(pose[\"keypoints\"], 0.5, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.5, ctx);\n    };\n\n\n    runPosenet();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <Webcam\n       ref={webcamRef}\n        style={{\n          position: \"absolute\",\n           marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex:9,\n            width:640,\n            height:480\n             }}\n             />\n\n\n            <canvas\n            ref={canvasRef}\n            style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex:9,\n            width:640,\n            height:480\n             }}/>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}